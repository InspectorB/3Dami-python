#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def sendMessage(self, message):
    """
    Parameters:
     - message
    """
    pass

  def sendScreenshot(self, screenshot):
    """
    Parameters:
     - screenshot
    """
    pass

  def ping(self):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sendMessage(self, message):
    """
    Parameters:
     - message
    """
    self.send_sendMessage(message)
    self.recv_sendMessage()

  def send_sendMessage(self, message):
    self._oprot.writeMessageBegin('sendMessage', TMessageType.CALL, self._seqid)
    args = sendMessage_args()
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendMessage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendMessage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.unavailable is not None:
      raise result.unavailable
    if result.unknownToken is not None:
      raise result.unknownToken
    if result.incorrectlyFormattedMessage is not None:
      raise result.incorrectlyFormattedMessage
    return

  def sendScreenshot(self, screenshot):
    """
    Parameters:
     - screenshot
    """
    self.send_sendScreenshot(screenshot)
    self.recv_sendScreenshot()

  def send_sendScreenshot(self, screenshot):
    self._oprot.writeMessageBegin('sendScreenshot', TMessageType.CALL, self._seqid)
    args = sendScreenshot_args()
    args.screenshot = screenshot
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendScreenshot(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendScreenshot_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.unavailable is not None:
      raise result.unavailable
    if result.unknownToken is not None:
      raise result.unknownToken
    if result.incorrectlyFormattedMessage is not None:
      raise result.incorrectlyFormattedMessage
    if result.screenshotHashNotUnique is not None:
      raise result.screenshotHashNotUnique
    return

  def ping(self):
    self.send_ping()
    self.recv_ping()

  def send_ping(self):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.unavailable is not None:
      raise result.unavailable
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sendMessage"] = Processor.process_sendMessage
    self._processMap["sendScreenshot"] = Processor.process_sendScreenshot
    self._processMap["ping"] = Processor.process_ping

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sendMessage(self, seqid, iprot, oprot):
    args = sendMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendMessage_result()
    try:
      self._handler.sendMessage(args.message)
    except Unavailable, unavailable:
      result.unavailable = unavailable
    except UnknownToken, unknownToken:
      result.unknownToken = unknownToken
    except IncorrectlyFormattedMessage, incorrectlyFormattedMessage:
      result.incorrectlyFormattedMessage = incorrectlyFormattedMessage
    oprot.writeMessageBegin("sendMessage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendScreenshot(self, seqid, iprot, oprot):
    args = sendScreenshot_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendScreenshot_result()
    try:
      self._handler.sendScreenshot(args.screenshot)
    except Unavailable, unavailable:
      result.unavailable = unavailable
    except UnknownToken, unknownToken:
      result.unknownToken = unknownToken
    except IncorrectlyFormattedMessage, incorrectlyFormattedMessage:
      result.incorrectlyFormattedMessage = incorrectlyFormattedMessage
    except ScreenshotHashNotUnique, screenshotHashNotUnique:
      result.screenshotHashNotUnique = screenshotHashNotUnique
    oprot.writeMessageBegin("sendScreenshot", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    try:
      self._handler.ping()
    except Unavailable, unavailable:
      result.unavailable = unavailable
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sendMessage_args:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'message', (Message, Message.thrift_spec), None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.message = Message()
          self.message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMessage_args')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRUCT, 1)
      self.message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendMessage_result:
  """
  Attributes:
   - unavailable
   - unknownToken
   - incorrectlyFormattedMessage
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'unavailable', (Unavailable, Unavailable.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'unknownToken', (UnknownToken, UnknownToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'incorrectlyFormattedMessage', (IncorrectlyFormattedMessage, IncorrectlyFormattedMessage.thrift_spec), None, ), # 3
  )

  def __init__(self, unavailable=None, unknownToken=None, incorrectlyFormattedMessage=None,):
    self.unavailable = unavailable
    self.unknownToken = unknownToken
    self.incorrectlyFormattedMessage = incorrectlyFormattedMessage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.unavailable = Unavailable()
          self.unavailable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.unknownToken = UnknownToken()
          self.unknownToken.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.incorrectlyFormattedMessage = IncorrectlyFormattedMessage()
          self.incorrectlyFormattedMessage.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendMessage_result')
    if self.unavailable is not None:
      oprot.writeFieldBegin('unavailable', TType.STRUCT, 1)
      self.unavailable.write(oprot)
      oprot.writeFieldEnd()
    if self.unknownToken is not None:
      oprot.writeFieldBegin('unknownToken', TType.STRUCT, 2)
      self.unknownToken.write(oprot)
      oprot.writeFieldEnd()
    if self.incorrectlyFormattedMessage is not None:
      oprot.writeFieldBegin('incorrectlyFormattedMessage', TType.STRUCT, 3)
      self.incorrectlyFormattedMessage.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendScreenshot_args:
  """
  Attributes:
   - screenshot
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'screenshot', (Screenshot, Screenshot.thrift_spec), None, ), # 1
  )

  def __init__(self, screenshot=None,):
    self.screenshot = screenshot

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.screenshot = Screenshot()
          self.screenshot.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendScreenshot_args')
    if self.screenshot is not None:
      oprot.writeFieldBegin('screenshot', TType.STRUCT, 1)
      self.screenshot.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendScreenshot_result:
  """
  Attributes:
   - unavailable
   - unknownToken
   - incorrectlyFormattedMessage
   - screenshotHashNotUnique
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'unavailable', (Unavailable, Unavailable.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'unknownToken', (UnknownToken, UnknownToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'incorrectlyFormattedMessage', (IncorrectlyFormattedMessage, IncorrectlyFormattedMessage.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'screenshotHashNotUnique', (ScreenshotHashNotUnique, ScreenshotHashNotUnique.thrift_spec), None, ), # 4
  )

  def __init__(self, unavailable=None, unknownToken=None, incorrectlyFormattedMessage=None, screenshotHashNotUnique=None,):
    self.unavailable = unavailable
    self.unknownToken = unknownToken
    self.incorrectlyFormattedMessage = incorrectlyFormattedMessage
    self.screenshotHashNotUnique = screenshotHashNotUnique

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.unavailable = Unavailable()
          self.unavailable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.unknownToken = UnknownToken()
          self.unknownToken.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.incorrectlyFormattedMessage = IncorrectlyFormattedMessage()
          self.incorrectlyFormattedMessage.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.screenshotHashNotUnique = ScreenshotHashNotUnique()
          self.screenshotHashNotUnique.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendScreenshot_result')
    if self.unavailable is not None:
      oprot.writeFieldBegin('unavailable', TType.STRUCT, 1)
      self.unavailable.write(oprot)
      oprot.writeFieldEnd()
    if self.unknownToken is not None:
      oprot.writeFieldBegin('unknownToken', TType.STRUCT, 2)
      self.unknownToken.write(oprot)
      oprot.writeFieldEnd()
    if self.incorrectlyFormattedMessage is not None:
      oprot.writeFieldBegin('incorrectlyFormattedMessage', TType.STRUCT, 3)
      self.incorrectlyFormattedMessage.write(oprot)
      oprot.writeFieldEnd()
    if self.screenshotHashNotUnique is not None:
      oprot.writeFieldBegin('screenshotHashNotUnique', TType.STRUCT, 4)
      self.screenshotHashNotUnique.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:
  """
  Attributes:
   - unavailable
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'unavailable', (Unavailable, Unavailable.thrift_spec), None, ), # 1
  )

  def __init__(self, unavailable=None,):
    self.unavailable = unavailable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.unavailable = Unavailable()
          self.unavailable.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.unavailable is not None:
      oprot.writeFieldBegin('unavailable', TType.STRUCT, 1)
      self.unavailable.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
